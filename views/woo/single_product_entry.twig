

      
<div class="row">
    <div class="col-12 col-md-6">
        <div class="entry-images">
            <img id="product-image" src="{{ p_out.image_url }}" alt="{{ p_out.name }}" class="img-fluid product-image-normal" itemprop="image">
        </div>
    </div>
    <div class="col-12 col-md-6 itemdetails ">
        <div class="row">
            <div class="col-8">
                <h1 class="product_title" itemprop="name">{{ p_out.name }}</h1>
            </div>
            <div class="col-4 pt-2 d-flex justify-content-end">
                {% if p_out.is_in_whishlist %}
                    <div class="wishlist-icon fill box{{p_out.id}} ">
                        <i class="bi bi-heart-fill remove-from-wishlist heart{{ p_out.id }}" data-bs-toggle="tooltip" data-bs-placement="top" data-product-id="{{ p_out.id }}" title="Add to Wishlist"></i>
                    </div>
                {% else %}
                    <div class="wishlist-icon box{{p_out.id}}">
                        <i class="bi bi-heart add-to-wishlist heart{{ p_out.id }}" data-bs-toggle="tooltip" data-bs-placement="top" data-product-id="{{ p_out.id }}" title="Add to Wishlist"></i>
                    </div>
                {% endif %}
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                    {% for p in p_out.terms %}
                        <h5>{{ p.name }}</h5>
                    {% endfor %}
                </div>
                <div class="col-6 text-end">
                        <h4 class="var_info" id="product-price">
                            {{ p_out.price}}
                        </h4>                                
                </div>
        </div>
                
          

        <div class="row mt-4 product-details">
            <div class="col-12" id="product-sku">
                sku/ {{ p_out.sku }}
            </div>
            <div class="col-12">
                category/ {% for p in p_out.terms %}
                        {{ p.name }} 
                    {% endfor %}
            </div>
        </div>

        <div class="row mt-4 product-description">
            <div class="col-12" id="product-description">
                {{ p_out.description | raw }}
            </div>
        </div>
        
       
        {% if user.is_wholesaler or user.is_admin %}
            <form action="" method="get">
                <div class="row product-colors cmt-4">
                    <div class="color-selection colorform mt-3">
                        <label>Color</label>
                        <select class="form-select" id="rrattribute_pa_bottle-color" name="attribute_pa_bottle-color" onchange="this.form.submit()">
                            {% for color in p_out.colors %}
                                <option value="{{ color.value }}" {% if color.selected %}selected{% endif %}>{{ color.name }}</option>
                            {% endfor %}
                        </select>             </div>
                </div>
            </form>
            
        {% else %}
            <div class="row product-colors cmt-4">
                <div class="color-selection colorform mt-3">
                    <label>Color</label>
                    <select class="form-select" id="attribute_pa_bottle-color" name="attribute_pa_bottle-color">
                        {% for color in p_out.colors %}
                            <option value="{{ color.value }}" {% if color.selected %}selected{% endif %}>{{ color.name }}</option>
                        {% endfor %}
                    </select>    
                </div>
            </div>
        {% endif %}
        

        <div class="row items mt-5 mb-3">
            
                <form class="cart" method="post" enctype='multipart/form-data' id="add-to-cart-form">
                    <div class="row ">
                        <div class="col-8">
                        <label for="product_quantity">Items</label>
                        <input type="number" id="product_quantity" name="quantity" value="1" min="1"/>
                    </div>
                    <div class="col-4 text-end">
                        <button type="submit" class="add_to_cart" id="add-to-cart-btn">
                        </button>
                    </div>
                    </div>
                    
                </form>
            
        </div>
    </div>
</div>


<div class="container-xxl p-2">
    <div class="row mt-4 additional-info">
    <div class="col-12 boxtop">
        <h4>Additional info</h4>
    </div>
    <div class=" dimensions mt-4 " id="product-dimensions">

        {% for d in p_out.dimensions %}
            <div class="row">
                <div class="col-6 col-md-1">
                    {{ d.label }}/
                </div>
                <div class="col-6 col-md-11">
                    {{ d.value }}
                </div>
            </div>
        {% endfor %}
    </div>
</div>
</div>

<div class="container-fluid">
    <div class="container-xxl">
         <div class="row productgallery" data-masonry='{"percentPosition": true }'>
                {% for i in p_out.gallery %}
                    <div class="col-12 col-md-6 g-5">
                        <img src="{{ i.url }}" class="img-fluid" srcset="{{ i.srcset }}" alt="{{ i.alt }}" itemprop="image">
                    </div>
                {% endfor %}
         </div>
    </div>
</div>

<script>
    console.log("User data:", {{ user | json_encode | raw }});
</script>




{# console log the p_out #}
<style>
    .product-image-processing {
        filter: grayscale(100%) !important;
        opacity: 0.7 !important;
        transition: filter 0.3s ease, opacity 0.3s ease !important;
    }
    
    .product-image-normal {
        filter: none !important;
        opacity: 1 !important;
        transition: filter 0.3s ease, opacity 0.3s ease !important;
    }
</style>

<script>
    console.log("Product Output: ", {{ p_out | json_encode | raw }});
    
    // AJAX Add to Cart functionality
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('add-to-cart-form');
        const button = document.getElementById('add-to-cart-btn');
        const colorSelect = document.getElementById('attribute_pa_bottle-color');
        
        // Color change handler
        if (colorSelect) {
            colorSelect.addEventListener('change', function() {
                const selectedColor = this.value;
                const productId = '{{ p_out.id }}';
                const productImage = document.getElementById('product-image');
                
                // Add visual feedback - apply black and white filter during processing
                if (productImage) {
                    productImage.classList.remove('product-image-normal');
                    productImage.classList.add('product-image-processing');
                }
                
                // Update URL without page reload
                const urlParams = new URLSearchParams(window.location.search);
                urlParams.set('attribute_pa_bottle-color', selectedColor);
                const newUrl = window.location.pathname + '?' + urlParams.toString();
                history.pushState({}, '', newUrl);
                
                // Make AJAX request to get variation data
                const formData = new FormData();
                formData.append('action', 'ajax_color_variation');
                formData.append('product_id', productId);
                formData.append('color', selectedColor);
                formData.append('_wpnonce', '{{ ajax_nonce }}');
                
                const ajaxUrl = '{{ site.url }}/wp-admin/admin-ajax.php';
                
                fetch(ajaxUrl, {
                    method: 'POST',
                    body: formData
                })
                .then(function(response) {
                    console.log('Color variation response status:', response.status);
                    console.log('Color variation response headers:', response.headers.get('content-type'));
                    return response.text();
                })
                .then(function(responseText) {
                    console.log('Color variation raw response:', responseText);
                    
                    // Remove processing visual feedback
                    if (productImage) {
                        productImage.classList.remove('product-image-processing');
                        productImage.classList.add('product-image-normal');
                    }
                    
                    let data;
                    try {
                        data = JSON.parse(responseText);
                    } catch (e) {
                        console.error('JSON parse error:', e);
                        console.error('Response was:', responseText);
                        console.error('Response length:', responseText.length);
                        console.error('First 200 chars:', responseText.substring(0, 200));
                        throw new Error('Invalid JSON response');
                    }
                    
                    if (data.success) {
                        // Update all the elements with new variation data
                        const variationData = data.data;
                        console.log('Received variation data:', variationData);
                        
                        // Update image
                        if (productImage && variationData.image_url) {
                            productImage.src = variationData.image_url;
                            if (variationData.srcset) {
                                productImage.srcset = variationData.srcset;
                            }
                            if (variationData.image_alt) {
                                productImage.alt = variationData.image_alt;
                            }
                            console.log('Updated image');
                        }
                        
                        // Update price - use price_html which matches single_product_summary.php exactly
                        const productPrice = document.getElementById('product-price');
                        if (productPrice) {
                            let priceToUse = '';
                            if (variationData.price_html) {
                                priceToUse = variationData.price_html;
                                console.log('Using price_html (matching single_product_summary.php):', priceToUse);
                            } else if (variationData.price_formatted) {
                                priceToUse = variationData.price_formatted;
                                console.log('Fallback to price_formatted:', priceToUse);
                            } else if (variationData.display_price) {
                                priceToUse = variationData.display_price + '&nbsp;€';
                                console.log('Fallback to display_price:', priceToUse);
                            } else if (variationData.price_raw) {
                                priceToUse = variationData.price_raw + '&nbsp;€';
                                console.log('Fallback to price_raw:', priceToUse);
                            }
                            
                            if (priceToUse) {
                                productPrice.innerHTML = priceToUse;
                                console.log('Updated price to:', priceToUse);
                            } else {
                                console.log('No price data found in variation');
                            }
                        }
                        
                        // Update SKU
                        const productSku = document.getElementById('product-sku');
                        if (productSku && variationData.sku) {
                            productSku.innerHTML = 'sku/ ' + variationData.sku;
                            console.log('Updated SKU');
                        }
                        
                        // Update description
                        const productDescription = document.getElementById('product-description');
                        if (productDescription && variationData.description) {
                            productDescription.innerHTML = variationData.description;
                            console.log('Updated description');
                        }
                        
                        // Update dimensions
                        const productDimensions = document.getElementById('product-dimensions');
                        if (productDimensions && variationData.dimensions) {
                            let dimensionsHtml = '';
                            Object.values(variationData.dimensions).forEach(function(dimension) {
                                dimensionsHtml += '<div class="row">';
                                dimensionsHtml += '<div class="col-6 col-md-1">' + dimension.label + '/</div>';
                                dimensionsHtml += '<div class="col-6 col-md-11">' + dimension.value + '</div>';
                                dimensionsHtml += '</div>';
                            });
                            productDimensions.innerHTML = dimensionsHtml;
                            console.log('Updated dimensions');
                        }
                        
                        console.log('Variation updated successfully');
                    } else {
                        console.error('Error updating variation:', data.data.message);
                    }
                })
                .catch(function(error) {
                    console.error('Error:', error);
                    // Remove processing visual feedback on error
                    if (productImage) {
                        productImage.classList.remove('product-image-processing');
                        productImage.classList.add('product-image-normal');
                    }
                });
            });
        }
        
        // Add to cart functionality
        if (form && button) {
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // Disable button during request
                button.disabled = true;
                
                const formData = new FormData();
                formData.append('action', 'ajax_add_to_cart');
                formData.append('product_id', '{{ p_out.id }}');
                formData.append('quantity', document.getElementById('product_quantity').value);
                formData.append('_wpnonce', '{{ ajax_nonce }}');
                
                // Add selected color attribute if available
                if (colorSelect && colorSelect.value) {
                    formData.append('attribute_pa_bottle-color', colorSelect.value);
                }
                else{
                    //get it from the url parameters attribute_pa_bottle-color
                    const urlParams = new URLSearchParams(window.location.search);
                    const selectedColor = urlParams.get('attribute_pa_bottle-color');
                    if (selectedColor) {
                        formData.append('attribute_pa_bottle-color', selectedColor);
                    }
                }
                
                const ajaxUrl = '{{ site.url }}/wp-admin/admin-ajax.php';
                
                fetch(ajaxUrl, {
                    method: 'POST',
                    body: formData
                })
                .then(function(response) {
                    console.log('Response status:', response.status);
                    console.log('Response headers:', response.headers.get('content-type'));
                    return response.text(); // First get as text to see what we're receiving
                })
                .then(function(responseText) {
                    console.log('Raw response:', responseText);
                    
                    // Try to parse as JSON
                    let data;
                    try {
                        data = JSON.parse(responseText);
                    } catch (e) {
                        console.error('JSON parse error:', e);
                        console.error('Response was:', responseText);
                        throw new Error('Invalid JSON response');
                    }
                    
                    console.log('Parsed data:', data);
                    
                    if (data.success) {
                        // Update cart count if cart counter exists
                        if (data.data && data.data.cart_count) {
                            const cartCountElements = document.querySelectorAll('.cart-count');
                            cartCountElements.forEach(function(el) {
                                el.textContent = data.data.cart_count;
                            });
                        }
                        
                        // Show success notification
                        const message = data.data && data.data.message ? data.data.message : 'Product added to cart!';
                        showNotification(message, 'success');
                        
                        // Re-enable button
                        button.disabled = false;
                    } else {
                        // Error handling
                        button.disabled = false;
                        
                        const errorMessage = data.data && data.data.message ? data.data.message : 'Failed to add product to cart';
                        showNotification(errorMessage, 'error');
                    }
                })
                .catch(function(error) {
                    console.error('Error:', error);
                    button.disabled = false;
                    showNotification('An error occurred. Please try again.', 'error');
                });
            });
            
            // Simple notification function
            function showNotification(message, type) {
                const notification = document.createElement('div');
                notification.className = 'alert alert-' + (type === 'success' ? 'success' : 'danger') + ' notification-popup';
                notification.style.cssText = 'position: fixed; top: 20px; right: 20px; z-index: 9999; max-width: 300px;';
                notification.textContent = message;
                
                document.body.appendChild(notification);
                
                setTimeout(function() {
                    notification.remove();
                }, 4000);
            }
        }
    });
</script>